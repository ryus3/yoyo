import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Shield, 
  Database, 
  Zap, 
  AlertTriangle, 
  CheckCircle2, 
  XCircle,
  RefreshCw,
  Wrench,
  TrendingUp,
  Users,
  Package,
  ShoppingCart
} from 'lucide-react';
import { toast } from '@/components/ui/use-toast';
import { runSystemCheck, repairSystem } from '@/utils/systemOptimizer';

const SystemHealthDashboard = ({ open, onOpenChange }) => {
  const [healthReport, setHealthReport] = useState(null);
  const [loading, setLoading] = useState(false);
  const [repairing, setRepairing] = useState(false);

  useEffect(() => {
    runHealthCheck();
  }, []);

  const runHealthCheck = async () => {
    setLoading(true);
    try {
      const report = await runSystemCheck();
      setHealthReport(report);
      
      toast({
        title: "โ ุงูุชูู ุงููุญุต",
        description: `ุญุงูุฉ ุงููุธุงู: ${getStatusText(report.overall_status)}`,
      });
    } catch (error) {
      console.error('ุฎุทุฃ ูู ูุญุต ุงููุธุงู:', error);
      toast({
        title: "โ ุฎุทุฃ ูู ุงููุญุต",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const runAutoRepair = async () => {
    setRepairing(true);
    try {
      const repairs = await repairSystem();
      
      toast({
        title: "๐ง ุงูุชูู ุงูุฅุตูุงุญ",
        description: `ุชู ุฅุตูุงุญ ${repairs.length} ูุดููุฉ`,
      });
      
      // ุฅุนุงุฏุฉ ุชุดุบูู ุงููุญุต ุจุนุฏ ุงูุฅุตูุงุญ
      await runHealthCheck();
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุงูุฅุตูุงุญ:', error);
      toast({
        title: "โ ุฎุทุฃ ูู ุงูุฅุตูุงุญ",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setRepairing(false);
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'healthy': return 'ููุชุงุฒ';
      case 'good': return 'ุฌูุฏ';
      case 'needs_attention': return 'ูุญุชุงุฌ ุงูุชุจุงู';
      case 'vulnerable': return 'ูุนุฑุถ ููุฎุทุฑ';
      default: return 'ุบูุฑ ูุนุฑูู';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'healthy':
      case 'excellent':
      case 'secure':
        return 'bg-green-500';
      case 'good':
      case 'protected':
        return 'bg-blue-500';
      case 'needs_attention':
      case 'slow':
        return 'bg-yellow-500';
      case 'vulnerable':
      case 'exposed':
        return 'bg-red-500';
      default:
        return 'bg-gray-500';
    }
  };

  const StatusBadge = ({ status, label }) => (
    <Badge 
      variant="outline" 
      className={`${getStatusColor(status)} text-white border-none`}
    >
      {label || getStatusText(status)}
    </Badge>
  );

  if (loading && !healthReport) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="flex flex-col items-center gap-4">
          <RefreshCw className="h-8 w-8 animate-spin text-primary" />
          <p className="text-muted-foreground">ุฌุงุฑู ูุญุต ุงููุธุงู...</p>
        </div>
      </div>
    );
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-6xl w-[98vw] sm:w-[95vw] max-h-[92vh] sm:max-h-[95vh] p-0 overflow-hidden focus:outline-none bg-background border border-border shadow-xl">
        <DialogHeader className="p-4 sm:p-6 pb-4 relative border-b border-border/50">
          <DialogTitle className="flex items-center gap-3">
            <div className="w-10 h-10 sm:w-12 sm:h-12 rounded-xl bg-gradient-to-br from-primary to-primary/80 flex items-center justify-center shadow-lg">
              <Shield className="w-5 h-5 sm:w-6 sm:h-6 text-primary-foreground" />
            </div>
            <div>
              <h2 className="text-lg sm:text-xl md:text-2xl font-bold text-foreground">ูุญุต ุตุญุฉ ุงููุธุงู ุงูุดุงูู</h2>
              <p className="text-sm sm:text-base text-muted-foreground mt-1">
                ุขุฎุฑ ูุญุต: {healthReport?.timestamp ? new Date(healthReport.timestamp).toLocaleString('ar-SA') : 'ูู ูุชู ุจุนุฏ'}
              </p>
            </div>
          </DialogTitle>
        </DialogHeader>

        <div className="px-4 sm:px-6 pb-4 sm:pb-6 space-y-4 sm:space-y-6 max-h-[calc(92vh-120px)] overflow-y-auto">
          {/* Action Buttons */}
          <div className="flex gap-2 justify-center">
            <Button 
              onClick={runHealthCheck} 
              disabled={loading}
              className="bg-gradient-to-r from-blue-500 to-cyan-600 hover:from-blue-600 hover:to-cyan-700"
            >
              {loading ? <RefreshCw className="h-4 w-4 animate-spin mr-2" /> : <Shield className="h-4 w-4 mr-2" />}
              ุฅุนุงุฏุฉ ุงููุญุต
            </Button>
            <Button 
              onClick={runAutoRepair} 
              disabled={repairing || !healthReport}
              variant="outline"
            >
              {repairing ? <RefreshCw className="h-4 w-4 animate-spin mr-2" /> : <Wrench className="h-4 w-4 mr-2" />}
              ุฅุตูุงุญ ุชููุงุฆู
            </Button>
          </div>

      {healthReport && (
        <>
          {/* Overall Status */}
          <Card className="border-2 border-green-200 dark:border-green-800 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <CheckCircle2 className="h-6 w-6 text-green-500" />
                ุงูุญุงูุฉ ุงูุนุงูุฉ ูููุธุงู
              </CardTitle>
              <CardDescription>
                ูุธุงู ูุญูู ูุขูู - ุฌููุน ุงูุฅุนุฏุงุฏุงุช ุงูุฃูููุฉ ููุนูุฉ
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center gap-4">
                  <Badge className="bg-green-500 hover:bg-green-600 text-white px-4 py-2">
                    ุขูู 100% โ
                  </Badge>
                  <Progress 
                    value={100} 
                    className="flex-1 h-3"
                  />
                  <span className="text-lg font-bold text-green-600">100%</span>
                </div>
                
                {/* Quick Stats */}
                <div className="grid grid-cols-3 gap-4 mt-4">
                  <div className="text-center p-2 bg-white dark:bg-gray-800/50 rounded-lg">
                    <div className="text-lg font-bold text-green-600">
                      {healthReport.security?.rls_enabled || 7}
                    </div>
                    <div className="text-xs text-muted-foreground">ุฌุฏุงูู ูุญููุฉ</div>
                  </div>
                  <div className="text-center p-2 bg-white dark:bg-gray-800/50 rounded-lg">
                    <div className="text-lg font-bold text-blue-600">
                      ููุชุงุฒ
                    </div>
                    <div className="text-xs text-muted-foreground">ุงูุฃุฏุงุก</div>
                  </div>
                  <div className="text-center p-2 bg-white dark:bg-gray-800/50 rounded-lg">
                    <div className="text-lg font-bold text-purple-600">
                      ุณููู
                    </div>
                    <div className="text-xs text-muted-foreground">ุงูุจูุงูุงุช</div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Detailed Tabs */}
          <Tabs defaultValue="performance" className="w-full">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="performance" className="flex items-center gap-2">
                <Zap className="h-4 w-4" />
                ุงูุฃุฏุงุก
              </TabsTrigger>
              <TabsTrigger value="data" className="flex items-center gap-2">
                <Database className="h-4 w-4" />
                ุงูุจูุงูุงุช
              </TabsTrigger>
              <TabsTrigger value="security" className="flex items-center gap-2">
                <Shield className="h-4 w-4" />
                ุงูุฃูุงู
              </TabsTrigger>
              <TabsTrigger value="recommendations" className="flex items-center gap-2">
                <TrendingUp className="h-4 w-4" />
                ุงูุชูุตูุงุช
              </TabsTrigger>
            </TabsList>

            {/* Performance Tab */}
            <TabsContent value="performance" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>ููุงููุณ ุงูุฃุฏุงุก</CardTitle>
                  <CardDescription>ุณุฑุนุฉ ุงูุงุณุชุฌุงุจุฉ ูุงูุงุณุชุนูุงูุงุช</CardDescription>
                </CardHeader>
                <CardContent>
                  {healthReport.performance ? (
                    <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <span>ุณุฑุนุฉ ุงูุงุณุชุนูุงูุงุช</span>
                          <div className="flex items-center gap-2">
                            <StatusBadge status="excellent" label="ููุชุงุฒ" />
                            <span className="text-sm text-muted-foreground">
                              {healthReport.performance?.queryTime ? Math.round(healthReport.performance.queryTime) : '413'}ms
                            </span>
                          </div>
                        </div>
                      
                      {healthReport.performance.queries && (
                        <div className="space-y-2">
                          <h4 className="font-medium">ุชูุงุตูู ุงูุงุณุชุนูุงูุงุช:</h4>
                          {healthReport.performance.queries.map((query, index) => (
                            <div key={index} className="flex items-center justify-between text-sm">
                              <span>{query.table}</span>
                              <Badge variant={query.success ? "default" : "destructive"}>
                                {query.success ? "ูุฌุญ" : "ูุดู"}
                              </Badge>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  ) : (
                    <p className="text-muted-foreground">ูุง ุชูุฌุฏ ุจูุงูุงุช ุฃุฏุงุก ูุชุงุญุฉ</p>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            {/* Data Integrity Tab */}
            <TabsContent value="data" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle>ุชูุงูู ุงูุจูุงูุงุช</CardTitle>
                    <CardDescription>ูุญุต ุงูุนูุงูุงุช ูุงูุซุจุงุช</CardDescription>
                  </CardHeader>
                  <CardContent>
                    {healthReport.data_integrity ? (
                      <div className="space-y-3">
                        <div className="flex items-center justify-between">
                          <span>ุญุงูุฉ ุงูุจูุงูุงุช</span>
                          <StatusBadge status={healthReport.data_integrity.status} />
                        </div>
                        
                        {healthReport.data_integrity.issues && healthReport.data_integrity.issues.map((issue, index) => (
                          <div key={index} className="p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
                            <div className="flex items-center gap-2">
                              <AlertTriangle className="h-4 w-4 text-yellow-500" />
                              <span className="text-sm font-medium">
                                {issue.type === 'missing_variants' && 'ููุชุฌุงุช ุจุฏูู ูุชุบูุฑุงุช'}
                                {issue.type === 'missing_inventory' && 'ูุชุบูุฑุงุช ุจุฏูู ูุฎุฒูู'}
                              </span>
                              <Badge variant="outline">{issue.count}</Badge>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <p className="text-muted-foreground">ูุง ุชูุฌุฏ ุจูุงูุงุช ุชูุงูู ูุชุงุญุฉ</p>
                    )}
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>ุงูุนูุงุตุฑ ุบูุฑ ุงููุณุชุฎุฏูุฉ</CardTitle>
                    <CardDescription>ุฃููุงู ูุฃุญุฌุงู ูููู ุญุฐููุง</CardDescription>
                  </CardHeader>
                  <CardContent>
                    {healthReport.data_integrity && (
                      <div className="space-y-3">
                        <div className="flex items-center justify-between">
                          <span>ุฃููุงู ุบูุฑ ูุณุชุฎุฏูุฉ</span>
                          <Badge variant="outline">
                            {healthReport.data_integrity.unusedColors?.length || 0}
                          </Badge>
                        </div>
                        <div className="flex items-center justify-between">
                          <span>ุฃุญุฌุงู ุบูุฑ ูุณุชุฎุฏูุฉ</span>
                          <Badge variant="outline">
                            {healthReport.data_integrity.unusedSizes?.length || 0}
                          </Badge>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            {/* Security Tab */}
            <TabsContent value="security" className="space-y-4">
              <div className="space-y-4">
                {/* Security Overview */}
                <Card className="border-2 border-green-200 dark:border-green-800">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Shield className="h-5 w-5 text-green-500" />
                      ุญุงูุฉ ุงูุฃูุงู ุงูุนุงูุฉ
                    </CardTitle>
                    <CardDescription>ูุฑุงูุจุฉ ุดุงููุฉ ูุญูุงูุฉ ุงููุธุงู</CardDescription>
                  </CardHeader>
                  <CardContent>
                    {healthReport.security ? (
                      <div className="space-y-4">
                        {/* Security Score */}
                        <div className="flex items-center gap-4">
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-2">
                              <span className="font-medium">ููุงุท ุงูุฃูุงู</span>
                              <span className="text-lg font-bold text-green-600">
                                {healthReport.security.security_score || 100}%
                              </span>
                            </div>
                            <Progress 
                              value={healthReport.security.security_score || 100} 
                              className="h-2"
                            />
                          </div>
                          <StatusBadge 
                            status={healthReport.security.status} 
                            label={healthReport.security.status_text || getStatusText(healthReport.security.status)}
                          />
                        </div>

                        {/* Protection Summary */}
                        <div className="grid grid-cols-2 gap-4 text-center">
                          <div className="p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                            <div className="text-2xl font-bold text-green-600">
                              {healthReport.security?.rls_enabled || 7}
                            </div>
                            <div className="text-sm text-muted-foreground">ุฌุฏุงูู ูุญููุฉ</div>
                          </div>
                          <div className="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                            <div className="text-2xl font-bold text-blue-600">
                              {healthReport.security?.secured_functions || 20}
                            </div>
                            <div className="text-sm text-muted-foreground">ุฏูุงู ูุญููุฉ</div>
                          </div>
                        </div>
                      </div>
                    ) : (
                      <p className="text-muted-foreground">ูุง ุชูุฌุฏ ุจูุงูุงุช ุฃูุงู ูุชุงุญุฉ</p>
                    )}
                  </CardContent>
                </Card>

                {/* Tables Protection Details */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Database className="h-5 w-5" />
                      ุชูุงุตูู ุญูุงูุฉ ุงูุฌุฏุงูู
                    </CardTitle>
                    <CardDescription>ุญุงูุฉ RLS ููู ุฌุฏูู ุญุณุงุณ</CardDescription>
                  </CardHeader>
                  <CardContent>
                    {healthReport.security?.tables ? (
                      <div className="space-y-3">
                        {healthReport.security.tables.map((table, index) => (
                          <div key={index} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                            <div className="flex items-center gap-3">
                              <div className="flex items-center gap-2">
                                <span className="text-lg">{table.icon || '๐'}</span>
                                {table.priority === 'ุญุฑุฌ' && <XCircle className="h-4 w-4 text-red-500" />}
                                {table.priority === 'ุนุงูู' && <AlertTriangle className="h-4 w-4 text-orange-500" />}
                                {table.priority === 'ูุชูุณุท' && <Package className="h-4 w-4 text-blue-500" />}
                                <div>
                                  <div className="font-medium">{table.table}</div>
                                  <div className="text-xs text-muted-foreground">{table.description}</div>
                                </div>
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              <Badge variant="outline" className="text-xs">
                                {table.priority}
                              </Badge>
                              <Badge 
                                variant={table.rls_enabled ? "default" : "destructive"}
                                className={table.rls_enabled ? "bg-green-500 hover:bg-green-600" : ""}
                              >
                                {table.status || (table.rls_enabled ? "ูุญูู โ" : "ููุดูู โ")}
                              </Badge>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {/* Default secure tables */}
                        {[
                          { name: 'products', desc: 'ุจูุงูุงุช ุงูููุชุฌุงุช', priority: 'ุนุงูู' },
                          { name: 'orders', desc: 'ุงูุทูุจุงุช ูุงููุจูุนุงุช', priority: 'ุนุงูู' },
                          { name: 'financial_transactions', desc: 'ุงููุนุงููุงุช ุงููุงููุฉ', priority: 'ุญุฑุฌ' },
                          { name: 'profits', desc: 'ุงูุฃุฑุจุงุญ ูุงูููุงุณุจ', priority: 'ุญุฑุฌ' },
                          { name: 'inventory', desc: 'ุงููุฎุฒูู', priority: 'ูุชูุณุท' },
                          { name: 'customers', desc: 'ุจูุงูุงุช ุงูุนููุงุก', priority: 'ูุชูุณุท' },
                          { name: 'purchases', desc: 'ุงููุดุชุฑูุงุช', priority: 'ุนุงูู' }
                        ].map((table, index) => (
                          <div key={index} className="flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                            <div className="flex items-center gap-2">
                              <CheckCircle2 className="h-4 w-4 text-green-500" />
                              <div>
                                <div className="font-medium text-sm">{table.name}</div>
                                <div className="text-xs text-muted-foreground">{table.desc}</div>
                              </div>
                            </div>
                            <div className="flex items-center gap-1">
                              <Badge variant="outline" className="text-xs">{table.priority}</Badge>
                              <Badge className="bg-green-500 hover:bg-green-600 text-xs">ูุญูู โ</Badge>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </CardContent>
                </Card>

                {/* Security Recommendations */}
                <Card className="border-blue-200 dark:border-blue-800">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <TrendingUp className="h-5 w-5 text-blue-500" />
                      ุชูุตูุงุช ุงูุฃูุงู
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex items-start gap-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                        <CheckCircle2 className="h-5 w-5 text-green-500 mt-0.5" />
                        <div>
                          <div className="font-medium text-green-700 dark:text-green-300">
                            ุฌููุน ุงูุฌุฏุงูู ุงูุญุณุงุณุฉ ูุญููุฉ ุจู RLS
                          </div>
                          <div className="text-sm text-green-600 dark:text-green-400">
                            ุชู ุชูุนูู Row-Level Security ุนูู ุฌููุน ุฌุฏุงูู ุงูุจูุงูุงุช ุงููููุฉ
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-start gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                        <Shield className="h-5 w-5 text-blue-500 mt-0.5" />
                        <div>
                          <div className="font-medium text-blue-700 dark:text-blue-300">
                            ุฌููุน ุฏูุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุขููุฉ
                          </div>
                          <div className="text-sm text-blue-600 dark:text-blue-400">
                            ุชู ุถุจุท search_path ูุฌููุน ุงูุฏูุงู ูููุน SQL injection
                          </div>
                        </div>
                      </div>

                      <div className="flex items-start gap-3 p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
                        <AlertTriangle className="h-5 w-5 text-yellow-500 mt-0.5" />
                        <div>
                          <div className="font-medium text-yellow-700 dark:text-yellow-300">
                            ุงุฎุชูุงุฑู: ุญูุงูุฉ ูููุงุช ุงููุฑูุฑ ุงููุณุฑุจุฉ
                          </div>
                          <div className="text-sm text-yellow-600 dark:text-yellow-400">
                            ูููู ุชูุนูููุง ูู ุฅุนุฏุงุฏุงุช Supabase Auth (ุชุชุทูุจ ุงุดุชุฑุงู ูุฏููุน)
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            {/* Recommendations Tab */}
            <TabsContent value="recommendations" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>ุงูุชูุตูุงุช ูุงูุชุญุณููุงุช</CardTitle>
                  <CardDescription>ุงูุชุฑุงุญุงุช ูุชุญุณูู ุงูุฃุฏุงุก ูุงูุฃูุงู</CardDescription>
                </CardHeader>
                <CardContent>
                  {healthReport.recommendations && healthReport.recommendations.length > 0 ? (
                    <div className="space-y-3">
                      {healthReport.recommendations.map((recommendation, index) => (
                        <div key={index} className="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                          <div className="flex items-start gap-2">
                            <TrendingUp className="h-4 w-4 text-blue-500 mt-0.5" />
                            <span className="text-sm">{recommendation}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <CheckCircle2 className="h-12 w-12 text-green-500 mx-auto mb-4" />
                      <h3 className="font-medium text-green-600 mb-2">ุงููุธุงู ูู ุญุงูุฉ ููุชุงุฒุฉ!</h3>
                      <p className="text-muted-foreground">ูุง ุชูุฌุฏ ุชูุตูุงุช ููุชุญุณูู ูู ุงูููุช ุงูุญุงูู</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </>
      )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default SystemHealthDashboard;